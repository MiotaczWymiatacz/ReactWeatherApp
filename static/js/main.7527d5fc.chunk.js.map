{"version":3,"sources":["components/City.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["City","props","className","onSubmit","submit","type","placeholder","aria-label","aria-describedby","value","onChange","change","id","Result","weather","date","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","tempFloor","Math","round","console","log","width","height","viewBox","fill","xmlns","fillRule","d","APIKey","App","state","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","prevState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7527d5fc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./City.css\";\r\n\r\nconst City = (props) => {\r\n  return (\r\n    <div className=\"input\">\r\n      <form onSubmit={props.submit} className=\"input-group mb-3\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"City\"\r\n          aria-label=\"City\"\r\n          aria-describedby=\"button-addon2\"\r\n          value={props.value}\r\n          onChange={props.change}\r\n        />\r\n        <div className=\"input-group-append\">\r\n          <button className=\"btn btn-outline-light\" id=\"button-addon2\">\r\n            Search\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default City;\r\n","import React from \"react\";\r\nimport \"./Result.css\";\r\n\r\nconst Result = (props) => {\r\n  const {\r\n    date,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    pressure,\r\n    wind,\r\n    err,\r\n  } = props.weather;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n    const tempFloor = Math.round(temp);\r\n    console.log(tempFloor);\r\n    content = (\r\n      <div className=\"content\">\r\n        <div>\r\n          Weather for <strong>{city}</strong>\r\n        </div>\r\n        <div>{date}</div>\r\n        <div className=\"box temp\">\r\n          <svg\r\n            width=\"1.2em\"\r\n            height=\"1.2em\"\r\n            viewBox=\"0 0 16 16\"\r\n            className=\"bi bi-thermometer-half\"\r\n            fill=\"currentColor\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              fillRule=\"evenodd\"\r\n              d=\"M6 2a2 2 0 1 1 4 0v7.627a3.5 3.5 0 1 1-4 0V2zm2-1a1 1 0 0 0-1 1v7.901a.5.5 0 0 1-.25.433A2.499 2.499 0 0 0 8 15a2.5 2.5 0 0 0 1.25-4.666.5.5 0 0 1-.25-.433V2a1 1 0 0 0-1-1z\"\r\n            />\r\n            <path d=\"M9.5 12.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\r\n            <path\r\n              fillRule=\"evenodd\"\r\n              d=\"M8 1.75a.25.25 0 0 1 .25.25v10a.25.25 0 1 1-.5 0V2A.25.25 0 0 1 8 1.75z\"\r\n            />\r\n          </svg>\r\n          <div> {tempFloor}&#176;C</div>\r\n        </div>\r\n        <div className=\"box\">\r\n          <svg\r\n            width=\"1.5em\"\r\n            height=\"1.5em\"\r\n            viewBox=\"0 0 16 16\"\r\n            className=\"bi bi-brightness-alt-high\"\r\n            fill=\"currentColor\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              fillRule=\"evenodd\"\r\n              d=\"M5.041 10.5h5.918a3 3 0 0 0-5.918 0zM4 11a4 4 0 1 1 8 0 .5.5 0 0 1-.5.5h-7A.5.5 0 0 1 4 11zm4-8a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 3zm8 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 11a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.414a.5.5 0 1 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zM4.464 7.464a.5.5 0 0 1-.707 0L2.343 6.05a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707z\"\r\n            />\r\n          </svg>\r\n          <div> {sunriseTime}</div>\r\n        </div>\r\n        <div className=\"box\">\r\n          <svg\r\n            width=\"1.5em\"\r\n            height=\"1.5em\"\r\n            viewBox=\"0 0 16 16\"\r\n            className=\"bi bi-brightness-alt-low\"\r\n            fill=\"currentColor\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path d=\"M8.5 5.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm5 6a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm-11 0a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm9.743-4.036a.5.5 0 1 1-.707-.707.5.5 0 0 1 .707.707zm-8.486 0a.5.5 0 1 1 .707-.707.5.5 0 0 1-.707.707z\" />\r\n            <path\r\n              fillRule=\"evenodd\"\r\n              d=\"M5.041 10.5h5.918a3 3 0 0 0-5.918 0zM4 11a4 4 0 1 1 8 0 .5.5 0 0 1-.5.5h-7A.5.5 0 0 1 4 11z\"\r\n            />\r\n          </svg>\r\n          <div> {sunsetTime}</div>\r\n        </div>\r\n        <div>Wind {wind} m/s</div>\r\n        <div>Pressure {pressure} hPa</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div className=\"result\">{err ? `${city} not found` : content}</div>;\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\nimport City from \"./City\";\nimport Result from \"./Result\";\nimport \"./App.css\";\nimport \"./Result.css\";\nimport \"./City.css\";\n\nconst APIKey = \"23fadac2eda01ad72ef48fd8a9cb025e\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    err: false,\n  };\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  handleCitySubmit = (e) => {\n    e.preventDefault();\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n    fetch(API)\n      .then((response) => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"Error\");\n      })\n      .then((response) => response.json())\n      .then((data) => {\n        const time = new Date().toLocaleString();\n        this.setState((state) => ({\n          err: false,\n          date: time,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          city: state.value,\n        }));\n      })\n      .catch((err) => {\n        console.log(err);\n        this.setState((prevState) => ({\n          err: true,\n          city: prevState.value,\n        }));\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <City\n            value={this.state.value}\n            change={this.handleInputChange}\n            submit={this.handleCitySubmit}\n          />\n          <Result weather={this.state} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}